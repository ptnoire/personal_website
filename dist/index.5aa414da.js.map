{"mappings":"AAAA,MAAM,eAAe,SAAS,gBAAgB,CAAC;AAC/C,MAAM,UAAU,SAAS,aAAa,CAAC;AAGvC,8BAA8B;AAC9B,MAAM,cAAc,SAAS,OAAO,EAAE,GAAG,EAAE;IACvC,MAAM,CAAC,MAAM,GAAG;IAChB,MAAM,SAAS,MAAM,MAAM;IAC3B,IAAG,CAAC,MAAM,cAAc,EAAE;IAC1B,OAAO,SAAS,CAAC,MAAM,CAAC;IACxB,OAAO,SAAS,CAAC,MAAM,CAAC;IACxB,IAAI,SAAS,CAAC,MAAM,MAAM;AAC9B;AAEA,MAAM,aAAa;IACf,MAAM,IAAI;IACV,WAAW;QAAC;QAAG;KAAI;AACvB;AAEA,MAAM,WAAW,IAAI,qBAAqB,aAAa;AAEvD,aAAa,OAAO,CAAC,CAAA,OAAQ;IACzB,KAAK,SAAS,CAAC,GAAG,CAAC;IACnB,KAAK,SAAS,CAAC,GAAG,CAAC;IACnB,SAAS,OAAO,CAAC;AACrB;AAEA,MAAM,YAAY,SAAS,aAAa,CAAC;AACzC,MAAM,SAAS,SAAS,aAAa,CAAC;AAEtC,MAAM,kBAAkB,SAAU,CAAC,EAAE;IACjC,MAAM,OAAO,EAAE,MAAM;IACrB,QAAQ,GAAG,CAAC;IACZ,IAAI,KAAK,SAAS,CAAC,QAAQ,CAAC,QACxB,OAAO,GAAG,GAAG;AAErB;AAEA,UAAU,gBAAgB,CAAC,SAAS;AAEpC,SAAS,aAAa,CAAC,iBAAiB,gBAAgB,CAAC,SAAS,SAAS,CAAC,EAAE;IAC1E,EAAE,cAAc;IAChB,IAAG,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,cAAc;QAC3C,MAAM,KAAK,EAAE,MAAM,CAAC,YAAY,CAAC;QACjC,SAAS,aAAa,CAAC,IAAI,cAAc,CAAC;YAAC,UAAU;QAAQ;IAC/D,CAAC;AACH;AAEF,MAAM,iBAAiB,SAAS,aAAa,CAAC;AAE9C,MAAM,aAAa,iBAAiB;IAChC,MAAM,WAAW,MAAM,MAAM,CAAC,0CAA0C,CAAC;IACzE,MAAM,OAAO,MAAM,SAAS,IAAI;IAChC,WAAW;AACf;AAEA,aAAa,CAAC;AACd,MAAM,aAAa,eAAe,IAAI,EAAE;IACpC,KAAK,OAAO,CAAC,CAAA,MAAO;QAChB,MAAM,EAAE,UAAS,EAAE,SAAQ,EAAE,SAAQ,EAAE,YAAW,EAAE,WAAU,EAAE,GAAG;QACnE,aAAa;YACT,OAAO;YACP,MAAM;YACN,aAAa;YACb,aAAa;QACjB;QACA,IAAI,aAAa,WACb,aAAa;YACT,SAAS;QACb;QAEJ,YAAY;IACpB;AAAE;AAEF,MAAM,cAAc,eAAe,IAAI,EAAE;IACrC,MAAM,SAAS,CAAC;iCACa,EAAE,KAAK,KAAK,CAAC;OACvC,EAAE,KAAK,WAAW,CAAC;aACb,EAAE,KAAK,IAAI,CAAC;sBACH,EAAE,KAAK,WAAW,CAAC;IACrC,CAAC;IACD,eAAe,kBAAkB,CAAC,cAAc;AAChD,eAAe;AACnB;AAEA,iCAAiC;AACjC,+CAA+C;AAC/C,uCAAuC;AACvC,QAAQ;AACR,IAAI;AAEJ","sources":["peterJS.js"],"sourcesContent":["const contentCards = document.querySelectorAll('.contentCard')\r\nconst section = document.querySelector('.section__blog')\r\n\r\n\r\n// Intersectional Observer API\r\nconst obsCallback = function(entries, obs) {\r\n    const [entry] = entries;\r\n    const target = entry.target;\r\n    if(!entry.isIntersecting) return\r\n    target.classList.remove('hidden');\r\n    target.classList.remove('no__width');\r\n    obs.unobserve(entry.target);\r\n}\r\n\r\nconst obsOptions = {\r\n    root: null,\r\n    threshold: [0, 0.2],\r\n}\r\n\r\nconst observer = new IntersectionObserver(obsCallback, obsOptions);\r\n\r\ncontentCards.forEach(card => {\r\n    card.classList.add('hidden')\r\n    card.classList.add('no__width')\r\n    observer.observe(card)\r\n});\r\n\r\nconst dotBucket = document.querySelector('.dot__img__section');\r\nconst dotImg = document.querySelector('.dot__img');\r\n\r\nconst dotImgTransform = function (e) {\r\n    const link = e.target;\r\n    console.log(link)\r\n    if (link.classList.contains('dot')) {\r\n        dotImg.src = '../img/peter_1.jpg'\r\n    }\r\n}\r\n\r\ndotBucket.addEventListener('click', dotImgTransform)\r\n\r\ndocument.querySelector('.welcome__nav').addEventListener('click', function(e) {\r\n    e.preventDefault();\r\n    if(e.target.classList.contains('nav__link')) {\r\n      const id = e.target.getAttribute('href');\r\n      document.querySelector(id).scrollIntoView({behavior: 'smooth'});\r\n    }\r\n  })\r\n\r\nconst projectElement = document.querySelector('.project__list')\r\n\r\nconst gitHubData = async function() {\r\n    const retrieve = await fetch(`https://api.github.com/users/ptnoire/repos`)\r\n    const data = await retrieve.json();\r\n    renderData(data)\r\n}\r\n\r\ngitHubList = {};\r\nconst renderData = async function(data) {\r\n    data.forEach(ele => { \r\n        const { full_name, homepage, html_url, description, updated_at } = ele;\r\n        gitHubList = {\r\n            title: full_name,\r\n            link: html_url,\r\n            description: description,\r\n            last_update: updated_at,\r\n        }\r\n        if (homepage !== undefined) {\r\n            githubList = {\r\n                website: homepage,\r\n            }\r\n        }\r\n        displayData(gitHubList);\r\n})};\r\n\r\nconst displayData = async function(data) {\r\n    const markup = `\r\n    <li class=\"gitHub__item\"><h2>${data.title}</h2>\r\n    <p>${data.description}</p>\r\n    <a href=\"${data.link}\">Source Material</a>\r\n    <h3>Last Updated: ${data.last_update}</h3>\r\n    `;\r\n    projectElement.insertAdjacentHTML('afterbegin', markup)\r\n    // fixHosted();\r\n}\r\n\r\n// const fixHosted = function() {\r\n//     if (hostedElement.href == 'undefined') {\r\n//         hostedElement.innerHTML = ''\r\n//     }\r\n// }\r\n\r\ngitHubData();"],"names":[],"version":3,"file":"index.5aa414da.js.map","sourceRoot":"/__parcel_source_root/"}